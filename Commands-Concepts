git init
git config --global user.name "xyz"
git config --global user.email "xyz@abc.com"

git config --global --unset user.name
git config --global --unset user.email
 
git config --list

where do they exist?git 
----

ls
(list)
touch file1
(workspace) - red color
ls
git status
(shows the status of branch, file, etc.,)

git add file1
(from workspace to staging/index) - green color

git commit -m "asdf" file1
(asdf as label)
(from staging to local repo)
(it also creates/generates a commit ID)

git show commit id
(or we can give 1st 7 letters of commit id)

git log (local repo log)
git log -4 (recent 4 logs) (n = number)

git log --oneline    (displays single line all logs)
git log --oneline -n (displays n single line logs)

git log --author=name (displays logs on author name)
git log --author=name -oneline (author with oneline all logs)
git log --author=name -oneline -n (author with oneline n logs)

git log --since=yy--mm--dd (show the commits since then) or
git log --after=yy--mm--dd

git log --until=yy--mm--dd (shows until then) or
git log --before=yy--mm--dd

git log --since=yy--mm--dd --until=yy--mm--dd (or)
git log --after=yy--mm--dd --before=yy--mm--dd

git log --after="yy--mm--dd 21:00" --before="yy--mm--dd 19:00"
(we can see the any specific timeframe)
(time must be 24 hrs format)

git log -- filename
(gives the information of the file)

git log --grep "commit msg/label"
(gives the info for commit)

addtl info: we can still add more commands to the above command and make it customised command to get respective result

git add . (or)
git add * (or)
git add -A
(to add all files)


git reset head 
(from Staging to workspace)

git reset head *
(all from Stgng to Wrkspc)

git reset --soft commit id
(from local repo to stgng)

git reset --mixed commit id
(directly from local repo to workspace)
(also it moves staging/index area data also to workspace)

git reset --hard commit id
(to delete commit & its data)
-----

self task:
focus on git revert concept

------

realtime qstn:

modified file (ex: file1) can be moved
directly from workspace to local repo

How: using commit id

git commit -m "label" file1


-----

Cloning:

git clone (https://github.com/abcd)paste URL

for the first time, if we have existing credentials, we have to remove before hand
for that, that path is
Ctrl Pnl->Usr accnts-> Wndws drents -> Generic Credntls -> Github -> remove

then give our credentials and authenticate it

---

ways to upload

1. Credentials
   make changes in local and 
   git push and use crdntls for the 1st time

2. Token based
   make changes in local and git push to central repo
   Github > Settings > developer setting > Prsnl accss token > generate a new token

---

how to give permissions to our Repo:

1. Enter to Git accnt
2. Click Repo
3. Setting
4. Collaborators and give access
5. Manage access > add people
6. add with organisation name (ex: orgnstn/repo)

---
Real time issue:
at times git push or pull gets rejected.
It is because someone made changes to central repo and
we have to get that changes and push ours immdtly.

So, how to get changes and make changes

git pull --rebase
git push

----

df -h
(how to check disk space)

-----


1. workspace
2. staging/index
3. local repo,  how to see files in local repo???
Ans: ls -a

-----
Branching

head means current branch

git branch
(default branch is main)

git branch name
(creates a branch with title as name)

git branch checkout name
(checkout takes us into the branch we desire)

git branch -b checkout name
(creates branch and takes into the branch)

git merge main
(merges data from pwd branch to main branch and vice-versa)

git branch -d branchname (or) git branch -D branchname
(to delete a branch)
(-d normal delete)
(-D delete withouot merge or kind of force delete)

git push origin branchname(or)git push centralrepo-path branchname
(to push branch into Centralrepo)


git push origin -d branchname(or)git push centralrepo-path banchname
(to delete branch from centralrepo)


----
Realtime issue: (--set-upstream)
apart from main branch, if we push to other branches it won't work

for that to work,
git push origin branchname
(or)
git push path of Centralrepo-path
(or)
.Git dir>Config file>
copy last 3 lines>
and paste the same there and change main branchname to desired branchname

---
merging branch in CentralRepo:

go to pull reqsts>
branchX from branchY
(also we can reviewers in organstn)

---
Merge Conflicts:

Reason
1. when multiple ppl making changes and trying to merge
means, 
changes in same or mutliple files & 2 diff branches 

git merge --abort
(to abort/skip merge without fixing)

---
Stash Memory:
Used only in Local Machine

Reason:
We can save the files in Stash Memory and finish the prioritised work in 1st place and recall 

We can take only
Modidied files
staging/index area files into Stash Memory
Stash will not accept neew files

git stash list

git stash save "label name"
git stash show label name

git stash show -p label name
(lists the data in the file) ex: git stash show -p show@{0/1/2...}

POP      =  CUT - PASTE      / git stash pop
APPLY    =  COPY - PASTE     / git stash apply label
DROP     =  DELETE           / git stash drop


POP   - brings back to workspace
APPLY - brings back to workspace keeping a copy in stash memory
DROP  - Deletes the stash data/memory

ex: pop/apply/drop
git stash pop
(gets 1st memory)

git stash pop labelname
(gets particular stash memory)
---
TAGS:

git tag

git tag T-3.5
(tag name & takes latest as default)

git show T-3.5
(shows the respective info)

git tag -d T-3.5
(deletes the reqrd TAG)

git tag T-4.5 cid
(adding tag to a respt commit)

git push origin T-3.5
(push to central repo)
or
git push --tags
(push all tags at once to central repo)

git checkout T-3.5
(takes into the tag T-3.5)

git push origin -d T-3.5 T-4.5 ...
(to delete Tags in Central Repo)
---

ALIAS:

we need to configure the command before hand & can use thereafter

git config --global alias.X "original name"

ex:
git status
git config --global alias.s "status"
(to configure)
git config --global --unset alias.name
(to remove from config)
---
REBASE:

copies everything with no more commit ids

git rebase branch
---
AMEND:
1.making changes to the commited files using Amend command
2. lets say given commit msg is wrong can be changed
3. only recent commits

git commit --amend -m "label msg"
---
REVERT
bring back to the previous changes

git revert cid
> opens a new page > save it > we are done

---
cherry pick:
copies particular commit to respective branch

git cherry pick commit id

ex:
go to respective branch and use the commad
---

DIFF
gives the diff b/w files or branches
or gives for single file also

git diff label1 label2
ex:
git diff file1 file2
git diff main submain
----

IGNORE:
any files can be ignored
compulsory .gitignore should be there

means, create a .gitignore file &
give all the files to be ignored in it.


git ignore file1 file2 file3 ...

file1, 2, 3 will be ignored and won't be shown in workspace and it can never be seen elsewhere
----

FORK:
It is not a command but a concept
can't be forked if we hae a repo on same name

1.forking a repo into our accnt(Git)
2.adds into our accnt

steps:
URL
click Fork
----

git pull = git fetch + git merge

fetch:
there is a place in local machine called ORIGIN Master

----

qstns or doubts:
1. diff b/w 
git pull vs git clone
git pull --rebase vs git pull
git merge branch name vs fork
git fetch vs git push origin
git push vs git push origin
squashing concept?
git annotate?
git -bisect?


other commands
git branch -r (remote branches)
git branch -a (all branches)


how to check history in github?
LFS:
for large files,
and is extension for git. allows storage of large files in different location, but still allowing the tracking of those large files.


Github Concept	 What it is
--------------   --------------
Pull request	 Request for review of changes to a repository
Merge Request	 Other name for “pull request”
Repository Fork  Copy of a repository that you manage
Repository Clone Local version of a hosted repository(e.g. Github, Gitlab)
